# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bit.power_of_two as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 599.7
    module_0.is_power_of_two(float_0)


def test_case_1():
    int_0 = 30
    var_0 = module_0.is_power_of_two(int_0)
    assert var_0 is False
    var_1 = module_0.is_power_of_two(int_0)
    assert var_1 is False
    var_2 = module_0.is_power_of_two(int_0)
    assert var_2 is False
    var_3 = module_0.is_power_of_two(var_0)
    assert var_3 is False
    var_4 = module_0.is_power_of_two(int_0)
    assert var_4 is False
    var_5 = module_0.is_power_of_two(int_0)
    assert var_5 is False
    var_6 = module_0.is_power_of_two(var_4)
    assert var_6 is False
    var_7 = module_0.is_power_of_two(var_0)
    assert var_7 is False
    var_8 = module_0.is_power_of_two(var_5)
    assert var_8 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b""
    module_0.is_power_of_two(bytes_0)
