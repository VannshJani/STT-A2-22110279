# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.caesar_cipher as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.caesar_cipher(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.caesar_cipher(dict_0, dict_0)
    assert var_0 == ""
    module_0.caesar_cipher(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.caesar_cipher(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\n    :param A: Hermitian positive-definite matrix of type List[List[float]]\n    :return: matrix of type List[List[float]] if A can be decomposed,\n    otherwise None\n    "
    module_0.caesar_cipher(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\n    Perform a depth first search traversal of the graph starting at the given vertex.\n    Stores the order in which nodes were visited to the list, in transposed order.\n    "
    none_type_0 = None
    module_0.caesar_cipher(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "kL\r(-X*-%"
    str_1 = "{}[{}]{}"
    var_0 = module_0.caesar_cipher(str_1, str_1)
    assert var_0 == "{}[{}]{}"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)
