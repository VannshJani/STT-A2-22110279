# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bit.has_alternative_bit as module_0


def test_case_0():
    int_0 = 2863311530
    var_0 = module_0.has_alternative_bit(int_0)
    assert var_0 is True


def test_case_1():
    none_type_0 = None
    var_0 = module_0.has_alternative_bit(none_type_0)
    assert var_0 is True


def test_case_2():
    int_0 = 2863311530
    var_0 = module_0.has_alternative_bit_fast(int_0)
    assert var_0 is True
    var_1 = module_0.has_alternative_bit(int_0)
    assert var_1 is True


def test_case_3():
    int_0 = 2863311530
    var_0 = module_0.has_alternative_bit_fast(int_0)
    assert var_0 is True
    var_1 = module_0.has_alternative_bit_fast(var_0)
    assert var_1 is True
    var_2 = module_0.has_alternative_bit(int_0)
    assert var_2 is True


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1209
    var_0 = module_0.has_alternative_bit(int_0)
    assert var_0 is False
    var_1 = module_0.has_alternative_bit(var_0)
    var_2 = module_0.has_alternative_bit(int_0)
    assert var_2 is False
    var_3 = module_0.has_alternative_bit_fast(var_1)
    assert var_3 is True
    var_4 = module_0.has_alternative_bit(var_0)
    bytes_0 = b"\xad\x0f"
    module_0.has_alternative_bit_fast(bytes_0)
