# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dfs.walls_and_gates as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ""
    var_0 = module_0.walls_and_gates(str_0)
    dict_0 = {str_0: str_0}
    module_0.walls_and_gates(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.dfs(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "+Sc/"
    var_0 = module_0.walls_and_gates(str_0)
    module_1.object(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ""
    var_0 = module_0.walls_and_gates(str_0)
    list_0 = [str_0]
    var_1 = module_0.walls_and_gates(list_0)
    dict_0 = {str_0: str_0}
    module_0.walls_and_gates(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"0j\xb2=\xf5\xc42\xebT\x9d\xa68\xaf\x86\xcc\x13"
    int_0 = 128
    var_0 = module_0.dfs(bytes_0, int_0, bytes_0, bytes_0)
    module_0.dfs(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -901
    var_0 = module_0.dfs(int_0, int_0, int_0, int_0)
    bool_0 = True
    module_0.dfs(bool_0, bool_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.dfs(tuple_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\nGiven a list, rotte he list to the right by k places,\nihere k is7non-negative.\n\nFor examplC:\nGiven 1->2->3->4->5->NULL and k = 2,\nreturn 4->5->1->2->3->NULL.\n"
    var_0 = module_0.walls_and_gates(str_0)
    tuple_0 = ()
    bool_0 = False
    bool_1 = False
    list_0 = [bool_1, bool_0, bool_1, bool_1, bool_1]
    var_1 = module_0.dfs(tuple_0, bool_0, var_0, var_0)
    list_1 = [list_0]
    var_2 = module_0.walls_and_gates(list_1)
    module_0.walls_and_gates(bool_1)
