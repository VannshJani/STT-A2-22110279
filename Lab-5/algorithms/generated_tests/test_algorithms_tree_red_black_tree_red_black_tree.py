# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.red_black_tree.red_black_tree as module_0


def test_case_0():
    r_b_tree_0 = module_0.RBTree()


def test_case_1():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = var_1.right_rotate(var_1)
    var_3 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    r_b_node_0 = module_0.RBNode(var_1, var_1, var_3, right=var_3)
    var_4 = var_3.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_5 = var_3.minimum(r_b_tree_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.val).__module__}.{type(var_5.val).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_5.left is None
    assert var_5.right is None
    assert (
        f"{type(var_5.color).__module__}.{type(var_5.color).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_6 = var_3.delete_fixup(var_1)


def test_case_2():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    r_b_tree_0.delete(r_b_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_1, var_1)
    var_1.delete(var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.maximum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, var_1, right=var_1)
    var_2 = var_1.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_1.delete_fixup(var_0)


def test_case_6():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.inorder()


def test_case_7():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = r_b_tree_0.left_rotate(var_1)
    r_b_node_0 = module_0.RBNode(var_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    r_b_tree_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    var_3 = r_b_tree_0.transplant(var_1, var_2)
    var_2.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = var_1.fix_insert(r_b_node_1)
    var_5 = var_2.delete_fixup(r_b_node_0)
    assert r_b_node_0.color == 0
    assert var_3.color == 0
    var_6 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_6.color == 0
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_7 = var_6.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.right is None
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    r_b_tree_0.delete_fixup(r_b_node_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    r_b_tree_0.inorder()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    r_b_node_0 = module_0.RBNode(dict_0, bool_0, right=dict_0)
    r_b_tree_0 = module_0.RBTree()
    r_b_tree_0.maximum(r_b_node_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    r_b_tree_1 = module_0.RBTree()
    var_2 = var_1.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_3 = var_1.delete(var_1)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert r_b_node_0.color == 0
    var_4 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_1.delete_fixup(var_1)


def test_case_14():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = var_1.right_rotate(var_1)
    var_3 = var_1.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = r_b_tree_0.maximum(var_1)
    r_b_node_0 = module_0.RBNode(var_1, var_1, var_3, right=var_3)
    var_5 = var_4.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_6 = var_1.delete(var_1)
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.left).__module__}.{type(r_b_node_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.color == 0
    var_7 = var_4.delete_fixup(var_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.right_rotate(var_1)
    var_3 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = var_3.maximum(r_b_node_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert var_4.color == 0
    var_5 = r_b_tree_0.maximum(var_1)
    var_6 = var_5.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    r_b_node_1 = module_0.RBNode(var_5, var_3, left=var_3)
    r_b_tree_0.inorder()


def test_case_16():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_3 = var_1.delete(var_1)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert r_b_node_0.color == 0
    var_4 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_5 = var_1.fix_insert(r_b_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = var_1.right_rotate(var_1)
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    r_b_tree_1 = module_0.RBTree()
    var_3 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = var_3.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_5 = var_1.delete(var_1)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert r_b_node_0.color == 0
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_6 = r_b_tree_0.inorder()
    var_3.delete_fixup(var_1)


def test_case_18():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_0 = module_0.RBNode(var_1, var_1, var_2, right=var_2)
    var_3 = var_2.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.right).__module__}.{type(var_2.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_4 = var_2.minimum(r_b_tree_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.val).__module__}.{type(var_4.val).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.left is None
    assert var_4.right is None
    assert (
        f"{type(var_4.color).__module__}.{type(var_4.color).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_5 = var_2.delete_fixup(var_1)


@pytest.mark.xfail(strict=True)
def test_case_19():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.right_rotate(var_1)
    var_3 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = var_3.maximum(r_b_node_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert var_4.color == 0
    var_5 = r_b_tree_0.maximum(var_1)
    var_6 = var_5.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_7 = var_1.delete(var_1)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert r_b_node_0.color == 0
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_8 = var_3.right_rotate(var_4)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.left is None
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_5.left is None
    r_b_node_1 = module_0.RBNode(var_3, var_7, left=var_3)
    r_b_tree_0.inorder()


def test_case_20():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_3 = r_b_tree_0.right_rotate(var_1)
    var_4 = r_b_tree_0.maximum(var_1)
    var_5 = r_b_tree_0.maximum(var_1)
    var_6 = var_5.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_7 = var_1.delete(var_1)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert r_b_node_0.color == 0
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    r_b_node_1 = module_0.RBNode(var_3, var_7, left=var_4)
    var_8 = r_b_tree_0.inorder()
    r_b_node_2 = module_0.RBNode(var_7, var_1, var_5)
    var_9 = var_1.transplant(r_b_node_2, var_6)


@pytest.mark.xfail(strict=True)
def test_case_21():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    var_2 = var_1.right_rotate(var_1)
    var_3 = var_1.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = r_b_tree_0.maximum(var_1)
    r_b_node_0 = module_0.RBNode(var_1, var_1, var_3, right=var_3)
    var_5 = var_4.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_6 = var_1.delete(var_1)
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.left).__module__}.{type(r_b_node_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.color == 0
    var_7 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    r_b_tree_0.inorder()


def test_case_22():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = var_2.minimum(r_b_node_0)
    var_4 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert var_4.color == 0
    var_5 = r_b_tree_0.left_rotate(var_1)
    r_b_tree_1 = module_0.RBTree()
    var_6 = r_b_tree_0.maximum(var_1)
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_7 = var_6.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_8 = var_6.transplant(var_3, r_b_node_1)
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_9 = var_2.delete(var_4)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_1.parent is None
    assert r_b_node_1.color == 0
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_10 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert (
        f"{type(r_b_node_1.right).__module__}.{type(r_b_node_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_4.left is None
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_6.left is None
    var_11 = var_4.left_rotate(r_b_node_2)
    assert r_b_node_0.parent is None
    assert (
        f"{type(r_b_node_0.left).__module__}.{type(r_b_node_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.parent is None
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_2.right is None
    var_12 = var_6.delete_fixup(r_b_tree_0)
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.color == 0
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_1.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.color == 0
    assert r_b_node_2.color == 0
    var_13 = var_6.fix_insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_23():
    list_0 = []
    r_b_node_0 = module_0.RBNode(list_0, list_0, list_0, list_0)
    r_b_tree_0 = module_0.RBTree()
    r_b_tree_0.fix_insert(r_b_node_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.maximum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, var_1, right=var_1)
    var_2 = var_1.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.right).__module__}.{type(r_b_tree_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    var_3 = r_b_tree_0.fix_insert(var_1)
    var_1.delete_fixup(var_2)


@pytest.mark.xfail(strict=True)
def test_case_25():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = module_0.RBNode(var_0, var_0, left=r_b_tree_0, right=r_b_tree_0)
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(r_b_node_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_3 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = var_3.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_0.delete(var_2)


@pytest.mark.xfail(strict=True)
def test_case_26():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=r_b_tree_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    var_3 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_4 = r_b_tree_0.maximum(var_1)
    var_3.delete(r_b_node_0)


def test_case_27():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.right_rotate(var_1)
    var_3 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = var_3.maximum(r_b_node_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert var_4.color == 0
    var_5 = r_b_tree_0.maximum(var_1)
    var_6 = var_5.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    r_b_node_1 = module_0.RBNode(var_5, var_3, left=var_3)
    var_7 = var_5.minimum(r_b_node_1)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_7.val is None
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_7.left is None
    assert var_7.color is None


@pytest.mark.xfail(strict=True)
def test_case_28():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = r_b_tree_0.fix_insert(r_b_node_1)
    var_5 = var_2.delete(var_3)
    var_6 = var_1.fix_insert(r_b_node_1)
    var_7 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_7.right is None
    assert var_7.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_8 = var_2.delete(r_b_node_1)
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_9 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_9.root).__module__}.{type(var_9.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_9.color == 0
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_10 = var_9.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.left).__module__}.{type(var_7.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_9.parent).__module__}.{type(var_9.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_9.left).__module__}.{type(var_9.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_11 = var_2.delete(var_7)
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.color == 0
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.color == 0
    var_12 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_13 = r_b_tree_1.insert(r_b_node_0)
    assert var_3.parent is None
    r_b_tree_0.inorder()


@pytest.mark.xfail(strict=True)
def test_case_29():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = var_1.fix_insert(r_b_node_1)
    var_5 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_5.right is None
    assert var_5.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_6 = var_5.delete(r_b_node_1)
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_7 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_7.color == 0
    var_8 = var_5.delete(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_9 = var_7.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.left).__module__}.{type(var_7.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_10 = r_b_tree_0.right_rotate(var_1)
    var_11 = r_b_tree_1.insert(r_b_node_0)
    assert var_3.parent is None
    assert var_3.color == 0
    var_12 = var_2.fix_insert(r_b_node_1)
    var_13 = r_b_tree_1.transplant(var_7, var_7)
    var_14 = var_7.delete_fixup(r_b_tree_0)
    var_5.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_30():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = r_b_tree_0.transplant(var_1, r_b_node_1)
    assert r_b_node_1.parent is None
    var_5 = var_2.minimum(var_1)
    var_6 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_6.right is None
    assert var_6.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_7 = r_b_tree_0.maximum(var_1)
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_8 = var_7.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.right is None
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_7.left).__module__}.{type(var_7.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_9 = var_2.delete(var_6)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert r_b_node_0.color == 0
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.parent is None
    assert var_3.color == 0
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_10 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_5.left is None
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_6.left is None
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_7.left is None
    var_11 = r_b_tree_1.insert(r_b_node_0)
    var_12 = var_6.left_rotate(r_b_node_2)
    assert (
        f"{type(r_b_node_0.left).__module__}.{type(r_b_node_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_2.right is None
    var_13 = var_7.delete_fixup(r_b_tree_0)
    assert r_b_node_2.color == 1
    var_6.insert(var_9)


@pytest.mark.xfail(strict=True)
def test_case_31():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = var_2.minimum(r_b_node_0)
    var_5 = var_2.minimum(var_1)
    var_6 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_6.right is None
    assert var_6.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_7 = var_2.delete_fixup(r_b_node_0)
    assert r_b_node_0.color == 0
    assert var_3.color == 0
    assert var_4.color == 0
    var_8 = r_b_tree_0.maximum(var_1)
    var_9 = var_6.delete(r_b_node_0)
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_10 = var_8.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.right is None
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_8.left).__module__}.{type(var_8.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_11 = var_2.delete(var_6)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.parent is None
    assert var_4.parent is None
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_8.root).__module__}.{type(var_8.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_12 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_5.left is None
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_6.left is None
    assert (
        f"{type(var_8.parent).__module__}.{type(var_8.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_8.left is None
    var_13 = r_b_tree_1.insert(r_b_node_0)
    var_14 = var_6.left_rotate(r_b_node_2)
    var_15 = r_b_tree_0.inorder()
    var_16 = var_2.fix_insert(r_b_node_1)
    var_17 = var_1.delete_fixup(r_b_node_2)
    assert r_b_node_2.color == 0
    var_18 = var_8.delete_fixup(r_b_tree_0)
    assert r_b_node_2.color == 1
    var_6.delete_fixup(var_8)


@pytest.mark.xfail(strict=True)
def test_case_32():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = var_2.minimum(r_b_node_0)
    var_5 = var_2.minimum(var_1)
    var_6 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_6.right is None
    assert var_6.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_7 = var_2.delete_fixup(r_b_node_0)
    assert r_b_node_0.color == 0
    assert var_3.color == 0
    assert var_4.color == 0
    var_8 = r_b_tree_0.maximum(var_1)
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_9 = var_8.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.right is None
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_8.left).__module__}.{type(var_8.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_10 = var_2.delete(var_6)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_0.parent is None
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.parent is None
    assert var_4.parent is None
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_8.root).__module__}.{type(var_8.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_11 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(r_b_node_0.right).__module__}.{type(r_b_node_0.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_5.left is None
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_6.left is None
    assert (
        f"{type(var_8.parent).__module__}.{type(var_8.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_8.left is None
    var_12 = r_b_tree_1.insert(r_b_node_0)
    var_13 = var_6.left_rotate(r_b_node_2)
    var_14 = r_b_tree_0.inorder()
    r_b_tree_2 = module_0.RBTree()
    r_b_tree_2.delete_fixup(var_6)


def test_case_33():
    complex_0 = 33.98 + 1408.84954j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    r_b_node_0 = module_0.RBNode(list_0, list_0, complex_0)
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_1 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_2 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_1, r_b_node_1, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_2)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = var_2.minimum(r_b_node_1)
    var_5 = var_2.maximum(r_b_node_1)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_5.right is None
    assert var_5.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_6 = var_2.delete_fixup(r_b_node_1)
    assert r_b_node_1.color == 0
    assert var_3.color == 0
    assert var_4.color == 0
    var_7 = r_b_tree_0.maximum(var_1)
    r_b_node_3 = module_0.RBNode(r_b_node_1, var_0, right=r_b_node_1)
    var_8 = var_7.left_rotate(r_b_node_1)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_1.right is None
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.right is None
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.left).__module__}.{type(var_7.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_9 = var_7.transplant(var_4, r_b_node_2)
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_10 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert r_b_node_2.parent is None
    assert (
        f"{type(r_b_node_2.right).__module__}.{type(r_b_node_2.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_5.left is None
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_7.left is None
    var_11 = r_b_tree_1.insert(r_b_node_1)
    var_12 = var_5.left_rotate(r_b_node_3)
    assert (
        f"{type(r_b_node_1.left).__module__}.{type(r_b_node_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_3.parent).__module__}.{type(r_b_node_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_3.right is None
    var_13 = var_2.fix_insert(r_b_node_2)
    assert r_b_node_2.color == 0
    var_14 = var_1.delete_fixup(r_b_node_3)
    assert r_b_node_3.color == 0
    var_15 = var_7.delete_fixup(r_b_tree_0)
    assert r_b_node_1.color == 1
    assert var_3.color == 1
    assert var_4.color == 1
    var_16 = var_7.fix_insert(var_7)


@pytest.mark.xfail(strict=True)
def test_case_34():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_2, var_2, var_2, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.color == 0
    var_4 = var_2.minimum(r_b_node_0)
    var_5 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_5.right is None
    assert var_5.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_6 = var_2.delete_fixup(r_b_node_0)
    assert r_b_node_0.color == 0
    assert var_4.color == 0
    var_7 = r_b_tree_0.maximum(var_1)
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_8 = var_7.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.left).__module__}.{type(var_7.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_9 = var_7.transplant(var_4, r_b_node_1)
    var_10 = var_2.delete(var_5)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_1.parent is None
    assert r_b_node_1.color == 0
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_11 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert (
        f"{type(r_b_node_1.right).__module__}.{type(r_b_node_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.left is None
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_5.left is None
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_7.left is None
    var_12 = r_b_tree_1.insert(r_b_node_0)
    var_13 = var_5.left_rotate(r_b_node_2)
    var_14 = r_b_tree_0.inorder()
    var_15 = var_2.fix_insert(r_b_node_1)
    var_16 = var_7.delete_fixup(r_b_tree_0)
    assert r_b_tree_0.color == 1
    assert var_1.color == 1
    assert var_2.color == 1
    assert var_3.color == 1
    assert var_5.color == 1
    assert var_7.color == 1
    var_17 = var_7.fix_insert(var_7)
    bool_0 = False
    var_1.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    r_b_node_0 = module_0.RBNode(r_b_tree_0, var_0, var_0, right=r_b_tree_0)
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_1 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    r_b_tree_1 = module_0.RBTree()
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_2 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_1, r_b_node_1, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_2)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = var_1.delete_fixup(r_b_node_0)
    assert r_b_node_0.color == 0
    var_5 = var_2.minimum(r_b_node_1)
    var_6 = var_2.maximum(r_b_node_1)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_6.right is None
    assert var_6.color == 0
    var_7 = r_b_tree_0.delete(r_b_node_2)
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    r_b_tree_2 = module_0.RBTree()
    var_8 = r_b_tree_0.maximum(var_1)
    r_b_node_3 = module_0.RBNode(r_b_node_1, var_0, right=r_b_node_1)
    r_b_tree_3 = module_0.RBTree()
    var_9 = var_8.left_rotate(r_b_node_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_8.parent).__module__}.{type(var_8.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_8.left).__module__}.{type(var_8.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_10 = var_8.transplant(var_5, r_b_node_2)
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_11 = var_2.delete(var_6)
    assert (
        f"{type(r_b_node_1.right).__module__}.{type(r_b_node_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_2.color == 0
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.right).__module__}.{type(var_5.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_12 = r_b_tree_0.right_rotate(var_1)
    assert r_b_tree_0.left is None
    assert var_1.left is None
    assert var_2.left is None
    assert (
        f"{type(r_b_node_2.right).__module__}.{type(r_b_node_2.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_6.left is None
    assert var_8.left is None
    var_13 = r_b_tree_2.insert(r_b_node_1)
    assert var_3.parent is None
    assert var_3.right is None
    var_14 = var_6.left_rotate(r_b_node_3)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_1.left).__module__}.{type(r_b_node_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_8.root).__module__}.{type(var_8.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_3.parent).__module__}.{type(r_b_node_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_3.right is None
    var_15 = var_2.left_rotate(r_b_node_1)
    var_16 = r_b_tree_0.inorder()
    var_17 = var_8.delete_fixup(r_b_tree_0)
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_1.right).__module__}.{type(r_b_node_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_2.left is None
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.right).__module__}.{type(var_5.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_3.color == 0
    var_18 = var_8.fix_insert(var_8)
    var_19 = r_b_tree_1.delete_fixup(r_b_node_3)
    assert r_b_tree_0.color == 1
    assert var_1.color == 1
    assert r_b_node_1.color == 1
    assert var_2.color == 1
    assert (
        f"{type(r_b_node_2.left).__module__}.{type(r_b_node_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_3.color == 1
    assert var_5.color == 1
    assert var_6.color == 1
    assert var_8.color == 1
    var_11.minimum(var_19)


@pytest.mark.xfail(strict=True)
def test_case_36():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    r_b_node_0 = module_0.RBNode(r_b_tree_0, var_0, var_0, right=r_b_tree_0)
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_1 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    r_b_tree_1 = module_0.RBTree()
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_2 = module_0.RBNode(var_2, var_0, r_b_node_0, r_b_node_0, var_0)
    var_3 = var_2.minimum(r_b_node_1)
    var_4 = var_1.maximum(r_b_node_1)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert var_4.color == 0
    var_5 = var_4.fix_insert(r_b_tree_0)
    var_6 = var_2.maximum(r_b_node_1)
    var_7 = r_b_tree_0.left_rotate(var_1)
    var_8 = r_b_tree_0.delete(r_b_node_2)
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    r_b_tree_2 = module_0.RBTree()
    var_9 = r_b_tree_0.maximum(var_1)
    r_b_node_3 = module_0.RBNode(r_b_node_1, var_0, right=r_b_node_1)
    var_10 = var_9.left_rotate(r_b_node_1)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_9.left).__module__}.{type(var_9.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_11 = var_9.transplant(var_3, r_b_node_2)
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_12 = var_2.delete(var_6)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_2.parent is None
    assert r_b_node_2.color == 0
    assert (
        f"{type(var_4.root).__module__}.{type(var_4.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_9.root).__module__}.{type(var_9.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_13 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert (
        f"{type(r_b_node_2.right).__module__}.{type(r_b_node_2.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_4.left is None
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_6.left is None
    assert (
        f"{type(var_9.parent).__module__}.{type(var_9.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_9.left is None
    var_14 = r_b_tree_2.insert(r_b_node_1)
    var_15 = var_6.left_rotate(r_b_node_3)
    var_16 = var_2.left_rotate(r_b_node_1)
    var_17 = r_b_tree_0.inorder()
    var_9.delete_fixup(r_b_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_0 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_1 = module_0.RBNode(r_b_tree_0, var_2, var_2, var_2, r_b_node_0)
    var_3 = r_b_tree_0.minimum(r_b_node_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.color == 0
    var_4 = var_2.minimum(r_b_node_0)
    var_5 = var_2.maximum(r_b_node_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_5.right is None
    assert var_5.color == 0
    r_b_tree_1 = module_0.RBTree()
    var_6 = var_2.delete_fixup(r_b_node_0)
    assert r_b_node_0.color == 0
    assert var_4.color == 0
    var_7 = r_b_tree_0.maximum(var_1)
    r_b_node_2 = module_0.RBNode(r_b_node_0, var_0, right=r_b_node_0)
    var_8 = var_7.left_rotate(r_b_node_0)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_0.parent).__module__}.{type(r_b_node_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_0.right is None
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_4.right is None
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.left).__module__}.{type(var_7.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_9 = var_7.transplant(var_4, r_b_node_1)
    var_10 = var_2.delete(var_5)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_1.parent is None
    assert r_b_node_1.color == 0
    assert (
        f"{type(var_3.root).__module__}.{type(var_3.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.root).__module__}.{type(var_5.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_11 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_1.right).__module__}.{type(r_b_node_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_12 = r_b_tree_1.insert(r_b_node_0)
    var_13 = var_5.left_rotate(r_b_node_2)
    var_14 = r_b_tree_0.inorder()
    var_15 = var_2.fix_insert(r_b_node_1)
    var_16 = var_7.delete_fixup(r_b_tree_0)
    assert r_b_tree_0.color == 1
    assert var_1.color == 1
    assert var_2.color == 1
    assert var_3.color == 1
    assert var_5.color == 1
    assert var_7.color == 1
    var_17 = var_7.fix_insert(var_7)
    r_b_tree_1.right_rotate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_38():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.insert(r_b_tree_0)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_tree_0.parent is None
    assert r_b_tree_0.left is None
    assert r_b_tree_0.right is None
    assert r_b_tree_0.color == 0
    r_b_node_0 = module_0.RBNode(r_b_tree_0, var_0, var_0, right=r_b_tree_0)
    var_1 = r_b_tree_0.minimum(r_b_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_1.parent is None
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.color == 0
    r_b_node_1 = module_0.RBNode(var_0, var_0, left=var_0, right=var_1)
    r_b_tree_1 = module_0.RBTree()
    var_2 = r_b_tree_0.maximum(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_2.parent is None
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.color == 0
    r_b_node_2 = module_0.RBNode(r_b_tree_0, var_0, r_b_node_1, r_b_node_1, var_0)
    var_3 = r_b_tree_0.minimum(r_b_node_2)
    assert var_3.val is None
    assert var_3.parent is None
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_4 = var_1.delete_fixup(r_b_node_0)
    assert r_b_node_0.color == 0
    var_5 = var_2.minimum(r_b_node_1)
    var_6 = var_2.maximum(r_b_node_1)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_6.right is None
    assert var_6.color == 0
    r_b_tree_2 = module_0.RBTree()
    var_7 = r_b_tree_0.maximum(var_1)
    r_b_node_3 = module_0.RBNode(r_b_node_1, var_0, right=r_b_node_1)
    r_b_tree_3 = module_0.RBTree()
    var_8 = var_7.left_rotate(r_b_node_1)
    assert (
        f"{type(r_b_tree_0.left).__module__}.{type(r_b_tree_0.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_1.parent).__module__}.{type(r_b_node_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert r_b_node_1.right is None
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_3.right is None
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert var_5.right is None
    assert (
        f"{type(var_6.left).__module__}.{type(var_6.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.left).__module__}.{type(var_7.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_9 = var_7.transplant(var_5, r_b_node_2)
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    var_10 = var_2.delete(var_6)
    assert (
        f"{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_1.root).__module__}.{type(var_1.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_2.root).__module__}.{type(var_2.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_2.parent is None
    assert r_b_node_2.color == 0
    assert (
        f"{type(var_6.root).__module__}.{type(var_6.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_7.root).__module__}.{type(var_7.root).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    var_11 = r_b_tree_0.right_rotate(var_1)
    assert (
        f"{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_tree_0.left is None
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_1.left is None
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_2.left is None
    assert (
        f"{type(r_b_node_2.right).__module__}.{type(r_b_node_2.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBTree"
    )
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_6.left is None
    assert (
        f"{type(var_7.parent).__module__}.{type(var_7.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert var_7.left is None
    var_12 = r_b_tree_2.insert(r_b_node_1)
    var_13 = var_6.left_rotate(r_b_node_3)
    assert (
        f"{type(r_b_node_1.left).__module__}.{type(r_b_node_1.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_3.parent).__module__}.{type(r_b_node_3.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_3.right is None
    var_14 = r_b_tree_0.inorder()
    var_15 = var_7.delete_fixup(r_b_tree_0)
    assert (
        f"{type(r_b_node_1.right).__module__}.{type(r_b_node_1.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(r_b_node_2.parent).__module__}.{type(r_b_node_2.parent).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_2.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert (
        f"{type(var_5.right).__module__}.{type(var_5.right).__qualname__}"
        == "algorithms.tree.red_black_tree.red_black_tree.RBNode"
    )
    assert r_b_node_3.color == 0
    var_16 = var_7.fix_insert(var_7)
    r_b_tree_1.delete_fixup(r_b_node_3)
