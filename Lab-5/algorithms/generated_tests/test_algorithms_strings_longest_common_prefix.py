# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.longest_common_prefix as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x150\xf6\x0bi\xc9\xd4\xe3\xbe1\xb6\xd6'"
    var_0 = module_0.common_prefix(bytes_0, bytes_0)
    assert var_0 == b"\x150\xf6\x0bi\xc9\xd4\xe3\xbe1\xb6\xd6'"


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "32wC~.&H4Xu'&\\"
    var_0 = module_0.common_prefix(str_0, str_0)
    assert var_0 == "32wC~.&H4Xu'&\\"
    var_1 = module_0.longest_common_prefix_v2(var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_prefix_v2(str_0)
    assert var_2 == ""
    var_3 = module_0.common_prefix(var_2, str_0)
    assert var_3 == ""
    module_0.longest_common(var_2, var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -238
    tuple_0 = (int_0, int_0, int_0, int_0)
    module_0.longest_common_prefix_v1(tuple_0)


def test_case_3():
    str_0 = "32wC~.&H4Xu'&\\"
    var_0 = module_0.longest_common_prefix_v2(str_0)
    assert var_0 == ""
    var_1 = module_0.common_prefix(str_0, str_0)
    assert var_1 == "32wC~.&H4Xu'&\\"
    var_2 = module_0.longest_common_prefix_v1(var_0)
    assert var_2 == ""


def test_case_4():
    str_0 = "\n    HashMap Data Type\n    HashMap() Create a new, empty map. It returns an empty map collection.\n    put(key, val) Add a new key-value pair to the map. If the key is already in the map then replace\n                    the old value with the new value.\n    get(key) Given a key, return the value stored in the map or None otherwise.\n    del_(key) or del map[key] Delete the key-value pair from the map using a statement of the form del map[key].\n    len() Return the number of key-value pairs stored in the map.\n    in Return True for a statement of the form key in map, if the given key is in the map, False otherwise.\n    "
    var_0 = module_0.longest_common_prefix_v2(str_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    var_0 = module_0.longest_common_prefix_v2(none_type_0)
    assert var_0 == ""
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    module_0.longest_common_prefix_v3(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    var_0 = module_0.longest_common_prefix_v3(none_type_0)
    assert var_0 == ""
    module_0.longest_common(none_type_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    object_0 = module_1.object()
    module_0.longest_common(object_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'F-<"xF'
    none_type_0 = None
    module_0.longest_common(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "32wC~.&H4Xu'&\\"
    var_0 = module_0.longest_common_prefix_v1(str_0)
    assert var_0 == ""
    var_1 = module_0.common_prefix(str_0, str_0)
    assert var_1 == "32wC~.&H4Xu'&\\"
    var_2 = module_0.longest_common_prefix_v2(var_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_prefix_v2(str_0)
    assert var_3 == ""
    var_4 = module_0.common_prefix(str_0, var_3)
    assert var_4 == ""
    module_0.longest_common(var_2, var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "32wC~.&H4Xu'&\\"
    var_0 = module_0.longest_common_prefix_v1(str_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_prefix_v2(var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_prefix_v2(str_0)
    assert var_2 == ""
    var_3 = module_0.common_prefix(var_2, str_0)
    assert var_3 == ""
    module_0.longest_common(var_1, var_1, var_1)


def test_case_12():
    str_0 = "\nCholesky matrix decomposition is used to find the decomposition of a\nHermitian positive-definite matrix A\ninto matrix V, so that V * V* = A, where V* denotes the conjugate\ntranspose of L.\nThe dimensions of the matrix A must match.\n\nThis method is mainly used for numeric solution of linear equations Ax = b.\n\nexample:\nInput matrix A:\n[[  4,  12, -16],\n [ 12,  37, -43],\n [-16, -43,  98]]\n\nResult:\n[[2.0, 0.0, 0.0],\n[6.0, 1.0, 0.0],\n[-8.0, 5.0, 3.0]]\n\nTime complexity of this algorithm is O(n^3), specifically about (n^3)/3\n\n"
    bytes_0 = b"\xaa\xdb\\\xf2o\xbb"
    dict_0 = {bytes_0: str_0}
    bool_0 = False
    set_0 = set()
    tuple_0 = (bytes_0, dict_0, bool_0, set_0)
    list_0 = [bytes_0]
    tuple_1 = (str_0, tuple_0, set_0, list_0)
    tuple_2 = (tuple_1, tuple_1)
    var_0 = module_0.longest_common_prefix_v2(tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_13():
    float_0 = -2318.079
    bytes_0 = b"\xd8\xc3U\x8d\xca1\xc14\x8b\xff\xdb\x83\xe0\xb7\xa8\xdb\x85\xe8\x01"
    tuple_0 = (float_0, float_0, float_0)
    tuple_1 = (float_0, bytes_0, tuple_0)
    list_0 = [tuple_1, tuple_0]
    var_0 = module_0.longest_common_prefix_v1(list_0)
    none_type_0 = None
    var_1 = module_0.longest_common_prefix_v3(none_type_0)
    assert var_1 == ""
    none_type_1 = None
    var_2 = module_0.longest_common_prefix_v1(none_type_1)
    assert var_2 == ""
    set_0 = set()
    var_3 = module_0.longest_common_prefix_v3(set_0)
    assert var_3 == ""
    module_0.longest_common(none_type_0, none_type_0, var_3)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    str_0 = "V?S}:8V0"
    dict_0 = {bool_0: bool_0, str_0: str_0}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0, str_0)
    module_0.longest_common_prefix_v2(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "h"
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    list_1 = [list_0, str_0, list_0, bool_0]
    var_0 = module_0.longest_common_prefix_v3(list_1)
    assert var_0 == ""
    bool_1 = False
    var_1 = module_0.common_prefix(bool_1, bool_1)
    assert var_1 == ""
    int_0 = 353
    module_0.longest_common_prefix_v3(int_0)
