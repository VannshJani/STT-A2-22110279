# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bfs.maze_search as module_0
import collections as module_1


def test_case_0():
    str_0 = "*\t0`[2t8r"
    var_0 = module_0.maze_search(str_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 240
    module_0.maze_search(int_0)


def test_case_2():
    str_0 = "3"
    var_0 = module_0.maze_search(str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1
    tuple_0 = (int_0, int_0, int_0, int_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.maze_search(tuple_1)
    assert var_0 == -1
    module_0.maze_search(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1
    tuple_0 = (int_0, int_0, int_0, int_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.maze_search(tuple_1)
    assert var_0 == 3
    module_0.maze_search(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = 2j
    dict_0 = {complex_0: complex_0}
    tuple_0 = (complex_0, dict_0, dict_0)
    str_0 = "TpBza"
    deque_0 = module_1.deque()
    tuple_1 = (tuple_0, str_0, deque_0, dict_0)
    var_0 = module_0.maze_search(tuple_1)
    assert var_0 == -1
    int_0 = 0
    tuple_2 = (int_0, int_0, int_0, int_0)
    tuple_3 = (tuple_2,)
    var_1 = module_0.maze_search(tuple_3)
    assert var_1 == -1
    module_0.maze_search(tuple_0)
