# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.is_rotated as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "g}EKX9m"
    var_0 = module_0.is_rotated(str_0, str_0)
    assert var_0 is True
    bool_0 = False
    var_1 = module_0.is_rotated_v1(str_0, str_0)
    assert var_1 is True
    module_0.is_rotated(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '\nGiven a pattern and a string str,\nfind if str follows the same pattern.\n\nHere follow means a full match, such that there is a bijection between\na letter in pattern and a non-empty substring in str.\n\nExamples:\npattern = "abab", str = "redblueredblue" should return true.\npattern = "aaaa", str = "asdasdasdasd" should return true.\npattern = "aabb", str = "xyzabcxzyabc" should return false.\nNotes:\nYou may assume both pattern and str contains only lowercase letters.\n'
    int_0 = 4
    set_0 = {str_0, str_0, str_0, int_0}
    list_0 = [set_0, str_0]
    bool_0 = True
    tuple_0 = (set_0, list_0, bool_0)
    var_0 = module_0.is_rotated(tuple_0, str_0)
    complex_0 = 2034.25 + 800.754j
    none_type_0 = None
    module_0.is_rotated(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_0.is_rotated(list_0, list_0)
    assert var_0 is False
    list_1 = [list_0, list_0, list_0, var_0]
    var_1 = module_0.is_rotated_v1(list_0, list_1)
    assert var_1 is False
    none_type_0 = None
    module_0.is_rotated(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.is_rotated(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    var_0 = module_0.is_rotated_v1(list_0, list_0)
    assert var_0 is True
    set_0 = set()
    module_0.is_rotated(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    int_0 = -3437
    tuple_0 = (bool_0, int_0, bool_0, int_0)
    set_0 = {tuple_0}
    float_0 = -69.767794
    list_0 = [set_0, bool_0, bool_0, float_0]
    var_0 = module_0.is_rotated_v1(list_0, tuple_0)
    assert var_0 is False
    str_0 = "siKGk1\x0c\n%EN8\nZ56!"
    var_1 = module_0.is_rotated_v1(str_0, str_0)
    assert var_1 is True
    var_2 = module_0.is_rotated(str_0, str_0)
    assert var_2 is True
    var_3 = module_0.is_rotated_v1(str_0, str_0)
    assert var_3 is True
    object_0 = module_1.object()
    var_4 = module_0.is_rotated_v1(str_0, str_0)
    assert var_4 is True
    bool_1 = False
    module_0.is_rotated(bool_1, bool_1)
