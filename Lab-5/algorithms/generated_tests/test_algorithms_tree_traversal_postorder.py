# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.traversal.postorder as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -149.7 - 4130.76j
    module_0.postorder(complex_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.postorder(none_type_0)


def test_case_2():
    none_type_0 = None
    var_0 = module_0.postorder_rec(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 9
    module_0.postorder_rec(int_0, int_0)


def test_case_4():
    str_0 = "vJI,nGy"
    node_0 = module_0.Node(str_0, right=str_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = module_0.postorder(node_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -1185.06321
    module_0.postorder_rec(float_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    int_0 = 89
    var_0 = module_0.postorder_rec(none_type_0)
    var_1 = module_0.postorder(var_0)
    node_0 = module_0.Node(int_0, int_0, none_type_0)
    node_1 = module_0.Node(int_0, right=none_type_0)
    var_2 = module_0.postorder(var_0)
    var_3 = module_0.postorder(var_0)
    var_4 = module_0.postorder(none_type_0)
    node_2 = module_0.Node(int_0, node_0)
    module_0.postorder(node_2)


def test_case_8():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0, right=none_type_0)
    var_0 = module_0.postorder(none_type_0)
    node_1 = module_0.Node(none_type_0, var_0)
    var_1 = module_0.postorder_rec(none_type_0)
    node_2 = module_0.Node(none_type_0)
    var_2 = module_0.postorder(node_1)
    var_3 = module_0.postorder(var_1)
    node_3 = module_0.Node(var_0, none_type_0, node_2)
    int_0 = -2109
    node_4 = module_0.Node(none_type_0, int_0)
    node_5 = module_0.Node(var_2)
    assert node_5.val == [None]
    var_4 = module_0.postorder(var_0)
    var_5 = module_0.postorder(node_3)
    var_6 = module_0.postorder_rec(node_2)
