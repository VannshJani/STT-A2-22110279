# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.validate_coordinates as module_0
import re as module_1


def test_case_0():
    str_0 = "--."
    var_0 = module_0.is_valid_coordinates_0(str_0)
    assert var_0 is False


def test_case_1():
    str_0 = "\nThis is a bfs-version of counting-islands problem in dfs section.\nGiven a 2d grid map of '1's (land) and '0's (water),\ncount the number of islands.\nAn island is surrounded by water and is formed by\nconnecting adjacent lands horizontally or vertically.\nYou may assume all four edges of the grid are all surrounded by water.\n\nExample 1:\n11110\n11010\n11000\n00000\nAnswer: 1\n\nExample 2:\n11000\n11000\n00100\n00011\nAnswer: 3\n\nExample 3:\n111000\n110000\n100001\n001101\n001100\nAnswer: 3\n\nExample 4:\n110011\n001100\n000001\n111100\nAnswer: 5\n"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.is_valid_coordinates_1(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = module_1.purge()
    module_0.is_valid_coordinates_regular_expression(tuple_0)


def test_case_4():
    str_0 = "-6."
    var_0 = module_0.is_valid_coordinates_0(str_0)
    assert var_0 is False


def test_case_5():
    str_0 = "U'*\x0c<'\x0cja~T%\n=atu"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False


def test_case_6():
    str_0 = "--)6."
    var_0 = module_0.is_valid_coordinates_0(str_0)


def test_case_7():
    str_0 = "27, .7"
    var_0 = module_0.is_valid_coordinates_0(str_0)
    assert var_0 is True


def test_case_8():
    str_0 = "2,.7"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "274,.7"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_coordinates_0(str_0)
    assert var_1 is False
    var_1.__getitem__(var_0, str_0)
