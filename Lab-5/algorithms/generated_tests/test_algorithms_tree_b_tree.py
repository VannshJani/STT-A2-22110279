# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.b_tree as module_0
import builtins as module_1


def test_case_0():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(int_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)


def test_case_1():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(b_tree_0)


def test_case_2():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(int_0)
    bool_0 = b_tree_0.find(var_0)
    assert bool_0 is False
    bool_1 = b_tree_0.find(b_tree_0)
    assert bool_1 is False
    var_1 = b_tree_0.insert_key(bool_1)
    var_2 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    bool_2 = b_tree_0.find(bool_0)
    assert bool_2 is True
    var_3 = b_tree_0.insert_key(int_1)
    bool_3 = True
    var_4 = b_tree_0.insert_key(bool_1)
    var_5 = b_tree_0.remove_key(bool_3)
    var_6 = b_tree_0.remove_key(int_0)
    var_7 = b_tree_0.remove_key(bool_0)


def test_case_3():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(b_tree_0)
    assert bool_0 is False


def test_case_4():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(b_tree_0)


def test_case_5():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(int_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(int_0)
    var_5 = b_tree_0.remove_key(int_0)


def test_case_6():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    b_tree_1 = b_tree_0.traverse_tree()


def test_case_7():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3


@pytest.mark.xfail(strict=True)
def test_case_8():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    var_0 = node_0.__repr__()
    assert var_0 == "<id_node: []>"
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0.insert_key(b_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    int_0 = 12
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    bool_0 = True
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is False
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    int_0.remove_key(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    tuple_0 = (int_0,)
    bool_0 = b_tree_0.find(tuple_0)
    assert bool_0 is False
    bool_1 = b_tree_0.find(b_tree_0)
    assert bool_1 is False
    var_0 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_1 = b_tree_0.insert_key(int_1)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    bool_2 = False
    bool_3 = b_tree_0.find(bool_2)
    assert bool_3 is False
    var_4 = b_tree_0.remove_key(int_1)
    var_4.find(bool_3)


def test_case_11():
    int_0 = 1
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(b_tree_0)
    var_1 = var_0.__repr__()
    bool_0 = b_tree_0.find(b_tree_0)
    assert bool_0 is False
    var_2 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_3 = b_tree_0.insert_key(int_1)
    var_4 = b_tree_0.insert_key(int_0)
    var_5 = b_tree_0.traverse_tree()
    var_6 = b_tree_0.insert_key(int_0)
    bool_1 = False
    bool_2 = b_tree_0.find(bool_1)
    assert bool_2 is False
    var_7 = b_tree_0.remove_key(bool_1)
    var_8 = b_tree_0.remove_key(int_0)
    var_9 = b_tree_0.remove_key(int_1)


def test_case_12():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(int_0)
    var_1 = b_tree_0.remove_key(b_tree_0)
    bool_0 = b_tree_0.find(var_1)
    assert bool_0 is False
    bool_1 = b_tree_0.find(b_tree_0)
    assert bool_1 is False
    var_2 = b_tree_0.insert_key(bool_1)
    var_3 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_4 = b_tree_0.insert_key(int_1)
    bool_2 = b_tree_0.find(bool_1)
    assert bool_2 is True
    var_5 = b_tree_0.insert_key(int_0)
    var_6 = b_tree_0.traverse_tree()
    var_7 = b_tree_0.insert_key(int_0)
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    var_8 = b_tree_0.insert_key(bool_1)
    var_9 = b_tree_0.remove_key(int_0)
    var_10 = b_tree_0.remove_key(bool_0)


def test_case_13():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_1 = b_tree_0.insert_key(int_1)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(int_1)


def test_case_14():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(int_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(int_0)


def test_case_15():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(int_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    bool_0 = False
    var_4 = b_tree_0.remove_key(bool_0)
    var_5 = b_tree_0.remove_key(int_0)


def test_case_16():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    int_1 = -103
    var_1 = b_tree_0.insert_key(int_1)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    bool_0 = False
    var_4 = b_tree_0.remove_key(bool_0)
    var_5 = b_tree_0.remove_key(int_1)


def test_case_17():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(b_tree_0)
    bool_0 = b_tree_0.find(var_0)
    assert bool_0 is False
    var_1 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_2 = b_tree_0.insert_key(int_1)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.insert_key(int_0)
    bool_1 = False
    var_5 = b_tree_0.remove_key(bool_1)
    var_6 = b_tree_0.remove_key(int_0)
    var_7 = b_tree_0.traverse_tree()
    var_8 = b_tree_0.remove_key(int_1)


def test_case_18():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_1 = b_tree_0.insert_key(int_1)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(int_0)
    var_5 = b_tree_0.remove_key(int_1)


def test_case_19():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    int_0 = -3
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    var_0 = b_tree_1.insert_key(int_0)
    var_1 = b_tree_1.insert_key(int_0)
    int_1 = -399
    var_2 = b_tree_1.insert_key(int_1)
    b_tree_2 = module_0.BTree()
    assert b_tree_2.min_numbers_of_keys == 1
    assert b_tree_2.max_number_of_keys == 3
    object_0 = module_1.object()
    var_3 = b_tree_1.traverse_tree()
    var_4 = b_tree_1.insert_key(int_0)
    bool_0 = False
    bool_1 = b_tree_1.find(bool_0)
    assert bool_1 is False
    var_5 = b_tree_2.traverse_tree()
    var_6 = b_tree_1.remove_key(bool_0)
    var_7 = b_tree_1.traverse_tree()
    var_8 = b_tree_1.remove_key(int_0)
    var_9 = b_tree_1.remove_key(int_1)


@pytest.mark.xfail(strict=True)
def test_case_20():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(b_tree_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(bool_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.insert_key(bool_0)
    bool_1 = True
    var_5 = b_tree_0.insert_key(bool_0)
    var_6 = b_tree_0.remove_key(bool_1)
    b_tree_0.remove_key(var_6)


def test_case_21():
    int_0 = -3
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(int_0)
    tuple_0 = (var_0,)
    var_1 = b_tree_0.remove_key(b_tree_0)
    bool_0 = b_tree_0.find(tuple_0)
    assert bool_0 is False
    bool_1 = b_tree_0.find(b_tree_0)
    assert bool_1 is False
    var_2 = b_tree_0.insert_key(bool_1)
    var_3 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_4 = b_tree_0.insert_key(int_1)
    var_5 = b_tree_0.insert_key(int_0)
    var_6 = b_tree_0.insert_key(int_0)
    bool_2 = True
    var_7 = b_tree_0.insert_key(bool_1)
    var_8 = b_tree_0.remove_key(bool_2)
    var_9 = b_tree_0.remove_key(bool_0)


def test_case_22():
    int_0 = 9
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(int_0)
    var_1 = b_tree_0.remove_key(b_tree_0)
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    var_2 = var_1.__repr__()
    bool_0 = b_tree_0.find(var_2)
    assert bool_0 is False
    bool_1 = b_tree_0.find(b_tree_0)
    assert bool_1 is False
    var_3 = b_tree_0.insert_key(bool_1)
    var_4 = b_tree_0.insert_key(int_0)
    int_1 = 1519
    var_5 = b_tree_0.insert_key(int_1)
    var_6 = b_tree_0.insert_key(int_0)
    var_7 = b_tree_0.traverse_tree()
    var_8 = b_tree_0.insert_key(bool_0)
    bool_2 = True
    var_9 = b_tree_0.insert_key(bool_1)
    var_10 = b_tree_0.remove_key(bool_2)
    var_11 = b_tree_0.remove_key(int_0)
    var_12 = b_tree_0.remove_key(bool_0)
