# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.min_distance as module_0


def test_case_0():
    bool_0 = False
    var_0 = module_0.lcs(bool_0, bool_0, bool_0, bool_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "IaiAxh<xqIwH\x0cej}\r"
    var_0 = module_0.min_distance(str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\nGiven an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.min_distance_dp(list_0, list_0)
    assert var_0 == 0
    str_1 = "IaiAxh<xqIwH\x0cej}\r"
    module_0.lcs(str_1, str_1, str_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"Q\x95`\x95n\xbf"
    var_0 = module_0.min_distance_dp(bytes_0, bytes_0)
    assert var_0 == 0
    none_type_0 = None
    set_0 = {var_0}
    var_1 = module_0.lcs(set_0, set_0, none_type_0, var_0)
    assert var_1 == 0
    module_0.lcs(none_type_0, none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x0c9!\xee\xcfX^\xdd\xc2\xd1\r\xed\xdd8P"
    bytes_1 = b'\x16\xbb\x8fi1\xc1a\x97)\xcb-C\x96\x11\x01D"6\x19'
    var_0 = module_0.min_distance_dp(bytes_1, bytes_0)
    assert var_0 == 34
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.min_distance(list_0, none_type_0)


def test_case_5():
    str_0 = "\nGiven an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.min_distance_dp(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.lcs(var_0, var_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.lcs(var_1, str_0, var_0, list_0)
    assert var_2 == 0
    var_3 = module_0.lcs(var_2, list_0, list_0, var_2)
    assert var_3 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x9a\x1f\r\xd1\x17\x1e\x8e\xb4\xbe"
    bytes_1 = b"\xda\x03\x91\xc5\xcf\xe3\x96\xcc\x8c\x0b\xd9\xb8"
    var_0 = module_0.min_distance(bytes_0, bytes_1)
    assert var_0 == 21
    list_0 = []
    var_1 = module_0.min_distance_dp(bytes_1, list_0)
    assert var_1 == 12
    none_type_0 = None
    dict_0 = {none_type_0: bytes_1, none_type_0: none_type_0}
    var_2 = module_0.min_distance(bytes_1, bytes_1)
    assert var_2 == 0
    module_0.min_distance(bytes_0, dict_0)
