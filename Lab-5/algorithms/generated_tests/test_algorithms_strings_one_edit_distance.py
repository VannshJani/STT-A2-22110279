# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.one_edit_distance as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\\prXt!v(*=k\\DMs6L]"
    str_1 = "m@)FY{[bzZ5gGfSdjPp"
    var_0 = module_0.is_one_edit(str_1, str_0)
    assert var_0 is False


def test_case_1():
    set_0 = set()
    var_0 = module_0.is_one_edit2(set_0, set_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2284
    module_0.is_one_edit2(int_0, int_0)


def test_case_3():
    str_0 = "U<7kG"
    str_1 = "\\prXt!v(*=k\\DMs6L]"
    str_2 = "m@)FY{[bzZ5gGfSdjPp"
    var_0 = module_0.is_one_edit2(str_2, str_1)
    assert var_0 is False
    var_1 = module_0.is_one_edit(str_1, str_2)
    assert var_1 is False
    var_2 = module_0.is_one_edit(str_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    var_0 = module_0.is_one_edit(set_0, set_0)
    assert var_0 is False
    module_0.is_one_edit(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "\\prXt!v(*=k\\DMs6L]"
    str_1 = "m@)FY{[bzZ5gGfSdjPp"
    var_0 = module_0.is_one_edit2(str_1, str_0)
    assert var_0 is False
    module_0.is_one_edit(str_1, var_0)


def test_case_6():
    str_0 = "w{u`6"
    str_1 = "\\prXt!v(*=k\\DMs6L]"
    str_2 = 'a,z`\r\x0bdlF"zf%_^=j'
    var_0 = module_0.is_one_edit2(str_2, str_1)
    assert var_0 is False
    var_1 = module_0.is_one_edit2(str_1, str_0)
    var_2 = module_0.is_one_edit(str_1, str_2)
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.is_one_edit2(set_0, str_0)


def test_case_8():
    str_0 = "\\prXt!(*=k\\DMs6L]"
    str_1 = 'a,zj\r\x0bdlF"zf%_^=j'
    var_0 = module_0.is_one_edit2(str_1, str_0)
    assert var_0 is False
    var_1 = module_0.is_one_edit2(str_0, str_1)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, set_0, list_0)
    var_0 = module_0.is_one_edit(tuple_0, list_0)
    assert var_0 is False
    module_0.is_one_edit2(var_0, set_0)


def test_case_10():
    str_0 = "\\prXt!v(*=k\\DMs6L]"
    str_1 = 'a,z`\r\x0bdlF"zf%_^=j'
    str_2 = '\\,z`\r\x0bdlF"zf%_^=j'
    var_0 = module_0.is_one_edit2(str_0, str_2)
    assert var_0 is False
    var_1 = module_0.is_one_edit(str_1, str_1)
    assert var_1 is False


def test_case_11():
    str_0 = ',z`\r\x0bdlF"z\\%_^=j'
    str_1 = 'p,z`\r\x0bdlF"z\\%_^=j'
    var_0 = module_0.is_one_edit2(str_1, str_0)
    assert var_0 is True
    var_1 = module_0.is_one_edit(str_0, str_1)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    var_0 = module_0.is_one_edit(set_0, set_0)
    assert var_0 is False
    list_0 = []
    var_1 = module_0.is_one_edit(list_0, set_0)
    assert var_1 is True
    str_0 = "=<H7kG"
    module_0.is_one_edit2(var_0, str_0)


def test_case_13():
    bytes_0 = b"\xe8K\xc7\xb5\xa7\x95\xf4\xc4\xfc\xf0\xca"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.is_one_edit2(bytes_0, dict_0)
    assert var_0 is False
    var_1 = module_0.is_one_edit(dict_0, dict_0)
    assert var_1 is False
    str_0 = "U=<HT7kG"
    var_2 = module_0.is_one_edit2(bytes_0, bytes_0)
    assert var_2 is False
    var_3 = module_0.is_one_edit2(str_0, str_0)
    assert var_3 is False
    str_1 = ',z`\r\x0bdlF"zf%_^=j'
    var_4 = module_0.is_one_edit(str_1, str_0)
    str_2 = 'pz`\r\x0bdlF"z\\%_^=j'
    var_5 = module_0.is_one_edit2(str_2, str_1)
    assert var_5 is False
    var_6 = module_0.is_one_edit(str_1, str_2)
    assert var_6 is False
    var_7 = module_0.is_one_edit(str_0, str_2)
    complex_0 = -2253.690629 - 3652.59279j
    tuple_0 = (complex_0,)
    tuple_1 = (var_3,)
    var_8 = module_0.is_one_edit(tuple_1, tuple_0)
    assert var_8 is True
