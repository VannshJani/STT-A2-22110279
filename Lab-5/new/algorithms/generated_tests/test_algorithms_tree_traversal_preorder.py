# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.traversal.preorder as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -104
    module_0.preorder(int_0)


def test_case_1():
    str_0 = ""
    var_0 = module_0.Node(str_0)
    var_1 = module_0.preorder(var_0)
    var_2 = module_0.preorder(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.preorder_rec(none_type_0)
    int_0 = -104
    node_0 = module_0.Node(var_0)
    dict_0 = {int_0: int_0}
    module_0.preorder(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    module_0.preorder_rec(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Given a list of points, find the k closest to the origin.\n\nIdea: Maintain a max heap of k elements.\nWe can iterate through all points.\nIf a point p has a smaller distance to the origin than the top element of a\nheap, we add point p to the heap and remove the top element.\nAfter iterating through all points, our heap contains the k closest points to\nthe origin.\n"
    list_0 = [str_0, str_0]
    module_0.preorder_rec(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 1352
    set_0 = {int_0, int_0, int_0, int_0}
    node_0 = module_0.Node(set_0, int_0)
    module_0.preorder(node_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = module_0.preorder_rec(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1, none_type_1, none_type_1)
    var_1 = module_0.preorder_rec(none_type_1)
    node_2 = module_0.Node(none_type_0, right=node_0)
    var_2 = module_0.preorder(var_1)
    var_3 = module_0.preorder_rec(node_2)
    var_4 = module_0.preorder(node_2)
    module_0.preorder_rec(var_1)
