# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.segment_tree.iterative_segment_tree as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "q@I[uu(\\$S([Hq$sh#"
    none_type_0 = None
    module_0.SegmentTree(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = -3142.28156 - 2454j
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, complex_0, complex_0]
    module_0.SegmentTree(list_0, none_type_0)


def test_case_2():
    bool_0 = False
    list_0 = [bool_0]
    segment_tree_0 = module_0.SegmentTree(list_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree"
    )
    assert segment_tree_0.tree == [None, False]
    assert segment_tree_0.size == 1
    assert segment_tree_0.fn is False
    var_0 = segment_tree_0.query(bool_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = []
    segment_tree_0 = module_0.SegmentTree(list_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree"
    )
    assert segment_tree_0.tree == []
    assert segment_tree_0.size == 0
    assert segment_tree_0.fn is False
    segment_tree_0.query(bool_0, bool_0)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0]
    segment_tree_0 = module_0.SegmentTree(list_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree"
    )
    assert segment_tree_0.tree == [None, False]
    assert segment_tree_0.size == 1
    assert segment_tree_0.fn is False
    var_0 = segment_tree_0.update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1]
    list_1 = [list_0]
    segment_tree_0 = module_0.SegmentTree(list_1, list_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree"
    )
    assert segment_tree_0.tree == [None, [True, True, True]]
    assert segment_tree_0.size == 1
    assert segment_tree_0.fn == [True, True, True]
    var_0 = segment_tree_0.query(bool_0, bool_0)
    var_1 = segment_tree_0.query(bool_1, bool_0)
    var_1.build_tree()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    list_0 = [bool_0]
    segment_tree_0 = module_0.SegmentTree(list_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree"
    )
    assert segment_tree_0.tree == [None, False]
    assert segment_tree_0.size == 1
    assert segment_tree_0.fn is False
    var_0 = segment_tree_0.query(bool_0, bool_0)
    assert var_0 is False
    bool_1 = True
    segment_tree_0.query(var_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    list_0 = [bool_0]
    segment_tree_0 = module_0.SegmentTree(list_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree"
    )
    assert segment_tree_0.tree == [None, False]
    assert segment_tree_0.size == 1
    assert segment_tree_0.fn is False
    var_0 = segment_tree_0.query(bool_0, bool_0)
    assert var_0 is False
    int_0 = 4470
    segment_tree_0.query(bool_0, int_0)
