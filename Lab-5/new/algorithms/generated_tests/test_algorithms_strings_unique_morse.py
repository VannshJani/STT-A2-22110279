# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.unique_morse as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "Interval ({}, {})"
    module_0.convert_morse_word(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "FizzBuzz"
    var_0 = module_0.unique_morse(str_0)
    assert var_0 == 5
    assert module_0.morse_code == {
        "a": ".-",
        "b": "-...",
        "c": "-.-.",
        "d": "-..",
        "e": ".",
        "f": "..-.",
        "g": "--.",
        "h": "....",
        "i": "..",
        "j": ".---",
        "k": "-.-",
        "l": ".-..",
        "m": "--",
        "n": "-.",
        "o": "---",
        "p": ".--.",
        "q": "--.-",
        "r": ".-.",
        "s": "...",
        "t": "-",
        "u": "..-",
        "v": "...-",
        "w": ".--",
        "x": "-..-",
        "y": "-.--",
        "z": "--..",
    }
    var_1 = module_0.unique_morse(str_0)
    assert var_1 == 5
    module_0.convert_morse_word(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.unique_morse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    var_0 = module_0.unique_morse(tuple_0)
    assert module_0.morse_code == {
        "a": ".-",
        "b": "-...",
        "c": "-.-.",
        "d": "-..",
        "e": ".",
        "f": "..-.",
        "g": "--.",
        "h": "....",
        "i": "..",
        "j": ".---",
        "k": "-.-",
        "l": ".-..",
        "m": "--",
        "n": "-.",
        "o": "---",
        "p": ".--.",
        "q": "--.-",
        "r": ".-.",
        "s": "...",
        "t": "-",
        "u": "..-",
        "v": "...-",
        "w": ".--",
        "x": "-..-",
        "y": "-.--",
        "z": "--..",
    }
    str_0 = 'B9+7n_aoj@J(l"Mvibb;'
    var_1 = module_0.unique_morse(tuple_0)
    dict_0 = {var_0: var_0, var_0: var_0, str_0: str_0, tuple_0: str_0}
    module_0.unique_morse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 384
    module_0.unique_morse(int_0)
