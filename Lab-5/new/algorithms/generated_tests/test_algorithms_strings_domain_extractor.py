# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.domain_extractor as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "\n    Worst-case Complexity: O(âˆšn) (root(n))\n    All items in list must be sorted like binary search\n\n    Find block that contains target value and search it linearly in that block\n    It returns a first target value in array\n\n    reference: https://en.wikipedia.org/wiki/Jump_search\n    "
    var_0 = module_0.domain_name_1(str_0)
    assert var_0 == "wikipedia"
    var_1 = module_0.domain_name_2(str_0)
    assert var_1 == "en"
    var_2 = module_0.domain_name_2(str_0)
    assert var_2 == "en"
    var_3 = module_0.domain_name_1(var_2)
    assert var_3 == "en"
    var_4 = module_0.domain_name_1(var_2)
    assert var_4 == "en"
    var_5 = module_0.domain_name_1(var_2)
    assert var_5 == "en"
    bool_0 = False
    var_6 = module_0.domain_name_2(var_3)
    assert var_6 == "en"
    module_0.domain_name_1(bool_0)


def test_case_1():
    str_0 = "(6T\t7m1D`raD"
    var_0 = module_0.domain_name_2(str_0)
    assert var_0 == "(6T\t7m1D`raD"
    var_1 = module_0.domain_name_1(var_0)
    assert var_1 == "(6T\t7m1D`raD"


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -521
    module_0.domain_name_1(int_0)
