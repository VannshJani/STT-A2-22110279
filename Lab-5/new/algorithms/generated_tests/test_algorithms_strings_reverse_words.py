# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.reverse_words as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.reverse_words(bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse(bool_0, bool_0, bool_0)


def test_case_2():
    str_0 = "fr_G/0N\x0b}OVc!'Df9EHM"
    var_0 = module_0.reverse_words(str_0)
    assert var_0 == "}OVc!'Df9EHM fr_G/0N"


def test_case_3():
    str_0 = "\nGiven a binary tree, find the lowest common ancestor\n(LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia:\n    “The lowest common ancestor is defined between two nodes\n    v and w as the lowest node in T that has both v and w as\n    descendants\n    (where we allow a node to be a descendant of itself).”\n\n        _______3______\n       /                  ___5__          ___1__\n   /      \\        /         6      _2       0       8\n         /           7   4\nFor example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3.\nAnother example is LCA of nodes 5 and 4 is 5,\nsince a node can be a descendant of itself according to the LCA definition.\n"
    var_0 = module_0.reverse_words(str_0)
    assert (
        var_0
        == "definition. LCA the to according itself of descendant a be can node a since 5, is 4 and 5 nodes of LCA is example Another 3. is 1 and 5 nodes of (LCA) ancestor common lowest the example, For 4 7 / 8 0 _2 6 / \\ / ___1__ ___5__ / _______3______ itself).” of descendant a be to node a allow we (where descendants as w and v both has that T in node lowest the as w and v nodes two between defined is ancestor common lowest “The Wikipedia: on LCA of definition the to According tree. the in nodes given two of (LCA) ancestor common lowest the find tree, binary a Given"
    )
