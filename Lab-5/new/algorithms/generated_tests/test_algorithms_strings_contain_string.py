# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.contain_string as module_0


def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {}
    var_0 = module_0.contain_string(dict_0, dict_1)
    assert var_0 == 0
    var_1 = module_0.contain_string(dict_0, dict_1)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {}
    var_0 = module_0.contain_string(dict_0, dict_1)
    assert var_0 == 0
    module_0.contain_string(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.contain_string(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    var_0 = module_0.contain_string(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = ()
    float_0 = -2489.099
    dict_0 = {tuple_0: tuple_1, tuple_1: tuple_1, float_0: float_0, float_0: float_0}
    var_1 = module_0.contain_string(tuple_0, dict_0)
    assert var_1 == -1
    tuple_2 = (tuple_0, tuple_0)
    var_2 = module_0.contain_string(tuple_2, tuple_2)
    assert var_2 == 0
    module_0.contain_string(var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"L\xed\xf9j"
    bytes_1 = b"x\x81"
    var_0 = module_0.contain_string(bytes_0, bytes_0)
    assert var_0 == 0
    bytes_2 = b"\x91w\t\xb4\xb1\x11\x9d\xe7\xde,\x88;=\x8e\xdc\\B"
    var_1 = module_0.contain_string(bytes_1, bytes_2)
    assert var_1 == -1
    var_2 = module_0.contain_string(bytes_1, bytes_1)
    assert var_2 == 0
    var_3 = module_0.contain_string(bytes_0, bytes_1)
    assert var_3 == -1
    list_0 = [bytes_0]
    var_4 = module_0.contain_string(bytes_0, list_0)
    assert var_4 == -1
    var_5 = module_0.contain_string(list_0, list_0)
    assert var_5 == 0
    module_0.contain_string(var_5, var_4)
