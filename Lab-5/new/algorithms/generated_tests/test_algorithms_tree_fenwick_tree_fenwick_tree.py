# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.fenwick_tree.fenwick_tree as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -958
    int_1 = 395
    set_0 = {int_1, int_1, int_1}
    fenwick__tree_0 = module_0.Fenwick_Tree(set_0)
    var_0 = fenwick__tree_0.get_sum(int_0, int_0)
    assert var_0 == 0
    fenwick__tree_0.update_bit(int_0, int_0, int_0)


def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    fenwick__tree_0 = module_0.Fenwick_Tree(dict_0)
    var_0 = fenwick__tree_0.construct()
    var_1 = fenwick__tree_0.get_sum(var_0, bool_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    fenwick__tree_0 = module_0.Fenwick_Tree(dict_0)
    fenwick__tree_0.get_sum(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    bytes_0 = b"\xcd\x01wjm@s\xde\xa9\xfd\xefBp\x0c\x07+\xda"
    fenwick__tree_0 = module_0.Fenwick_Tree(bytes_0)
    var_0 = fenwick__tree_0.construct()
    var_0.update_bit(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 395
    set_0 = {int_0, int_0, int_0}
    fenwick__tree_0 = module_0.Fenwick_Tree(set_0)
    var_0 = fenwick__tree_0.update_bit(int_0, int_0, int_0)
    none_type_0 = None
    module_0.Fenwick_Tree(none_type_0)
