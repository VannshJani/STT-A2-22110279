# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.bst.kth_smallest as module_0


def test_case_0():
    solution_0 = module_0.Solution()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb1KO\xab\x04\x8e\xc9\xaaK\xf9\x94\xe2\x18\xdbhbx\x93-\x8a"
    module_0.kth_smallest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.kth_smallest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    solution_0 = module_0.Solution()
    list_0 = [solution_0, solution_0, solution_0]
    solution_0.kth_smallest(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    solution_0 = module_0.Solution()
    none_type_0 = None
    solution_0.kth_smallest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    module_0.kth_smallest(node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -895
    node_0 = module_0.Node(int_0, right=int_0)
    bool_0 = False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0, node_0)
    module_0.kth_smallest(node_2, bool_0)


def test_case_7():
    bool_0 = True
    solution_0 = module_0.Solution()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = module_0.kth_smallest(node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -895
    node_0 = module_0.Node(int_0, right=int_0)
    bool_0 = False
    none_type_0 = None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_0 = module_0.Node(none_type_0, node_1)
    module_0.kth_smallest(var_0, bool_0)
