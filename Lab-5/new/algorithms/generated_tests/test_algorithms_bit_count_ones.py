# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bit.count_ones as module_0


def test_case_0():
    int_0 = 177
    var_0 = module_0.count_ones_recur(int_0)
    assert var_0 == 4


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.count_ones_recur(none_type_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    module_0.count_ones_iter(tuple_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.count_ones_iter(dict_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 4663
    var_0 = module_0.count_ones_recur(int_0)
    assert var_0 == 7
    var_1 = module_0.count_ones_iter(var_0)
    assert var_1 == 3
    var_2 = module_0.count_ones_iter(var_1)
    assert var_2 == 2
    str_0 = "]frM\n>WNL6!tkPu{"
    module_0.count_ones_iter(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    var_0 = module_0.count_ones_iter(bool_0)
    assert var_0 == 1
    none_type_0 = None
    var_1 = module_0.count_ones_iter(none_type_0)
    assert var_1 == 0
    var_2 = module_0.count_ones_recur(var_1)
    assert var_2 == 0
    int_0 = 1024
    var_3 = module_0.count_ones_recur(int_0)
    assert var_3 == 1
    var_4 = module_0.count_ones_recur(var_1)
    assert var_4 == 0
    var_5 = module_0.count_ones_iter(int_0)
    assert var_5 == 1
    var_6 = module_0.count_ones_recur(var_5)
    assert var_6 == 1
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.count_ones_iter(set_0)
