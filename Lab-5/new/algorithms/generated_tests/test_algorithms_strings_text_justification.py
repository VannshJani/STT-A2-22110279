# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.text_justification as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.text_justification(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.text_justification(dict_0, dict_0)
    str_0 = "y2n]&A)&!bVQ"
    module_0.text_justification(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1383
    module_0.text_justification(int_0, int_0)


def test_case_3():
    bool_0 = True
    str_0 = "\n"
    var_0 = module_0.text_justification(str_0, bool_0)


def test_case_4():
    bool_0 = True
    str_0 = "e~BLU}Vo|7X{#"
    var_0 = module_0.text_justification(str_0, bool_0)


def test_case_5():
    bool_0 = False
    str_0 = "\n"
    with pytest.raises(ValueError):
        module_0.text_justification(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0, set_0)
    module_0.text_justification(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0, set_0)
    str_0 = "e~BLU}Vo|7X{#"
    bool_1 = True
    var_0 = module_0.text_justification(str_0, bool_1)
    int_0 = -3669
    tuple_1 = (bool_0, set_0, int_0)
    var_1 = module_0.text_justification(set_0, tuple_1)
    int_1 = 10
    var_2 = module_0.text_justification(var_0, int_1)
    module_0.text_justification(bool_1, tuple_0)
