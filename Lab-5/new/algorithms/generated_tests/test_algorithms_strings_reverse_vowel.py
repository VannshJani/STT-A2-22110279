# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.reverse_vowel as module_0


def test_case_0():
    str_0 = '\nGiven a string that contains only digits 0-9 and a target value,\nreturn all possibilities to add binary operators (not unary) +, -, or *\nbetween the digits so they prevuate to the target value.\n\nExamples:\n"123", 6 -> ["1+2+3", "1*2*3"]\n"232", 8 -> ["2*3+2", "2+3*2"]\n"105", 5 -> ["1*0+5","10-5"]\n"00", 0 -> ["0+0", "0-0", "0*0"]\n"3456237490", 9191 -> []\n'
    var_0 = module_0.reverse_vowel(str_0)
    assert (
        var_0
        == '\nGevan E streng thut canteans enly dogets 0-9 and u terget volii,\nretern ell pessobalutoos ta edd bonary iparoters (nit iniry) +, -, ir *\nbotwaun the deguts sa they pravaati ti tho tirgat volai.\n\naxemplis:\n"123", 6 -> ["1+2+3", "1*2*3"]\n"232", 8 -> ["2*3+2", "2+3*2"]\n"105", 5 -> ["1*0+5","10-5"]\n"00", 0 -> ["0+0", "0-0", "0*0"]\n"3456237490", 9191 -> []\n'
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.reverse_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.reverse_vowel(none_type_0)


def test_case_3():
    str_0 = "40"
    var_0 = module_0.reverse_vowel(str_0)
    assert var_0 == "40"
